---
apiVersion: apps/v1
kind: Deployment # Type of Kubernetes resource
metadata:
  name: chain-main # Name of the Kubernetes resource
  namespace: crypto
spec:
  replicas: 1 # Number of pods to run at any given time
  selector:
    matchLabels:
      app: chain-main # This deployment applies to any Pods matching the specified label
  template: # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels: # The labels that will be applied to all of the pods in this deployment
        app: chain-main
    spec: # Spec for the container which will run in the Pod
      containers:
        - name: chain-main
          image: public.ecr.aws/h0h5s3n6/cryptocom/chain-main:v1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "128Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "512m"
          ports:
            - containerPort: 26657 # Should match the port number that the Go application listens on
          # livenessProbe: # To check the health of the Pod
          #   httpGet:
          #     path: /health
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 5
          #   periodSeconds: 15
          #   timeoutSeconds: 5
          # readinessProbe: # To check if the Pod is ready to serve traffic or not
          #   httpGet:
          #     path: /readiness
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 1

---
apiVersion: v1
kind: Service # Type of kubernetes resource
metadata:
  name: chain-main-service # Name of the resource
  namespace: crypto
spec:
  type: NodePort # A port is opened on each node in your cluster via Kube proxy.
  ports: # Take incoming TCP requests on port 26657 and forward them to the targetPort of 8080
    - protocol: TCP
      port: 80
      targetPort: 26657
      nodePort: 26657
  selector:
    app: chain-main
